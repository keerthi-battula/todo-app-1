pipeline{
    agent any;
     tools{
       maven 'maven'
       jdk 'JDK11'
   }
    stages{
        stage("build"){
            steps{
                bat 'mvn clean'
                bat 'mvn -f app/pom.xml compile'
            }
            post{
                success{
                    echo "========Maven compile stage executed successfully========"
                }
                failure{
                    echo "========Maven compile stage execution failed========"
                }
            }
        }
    
     stage("Test"){
            steps{
                echo "Maven Test"
                bat 'mvn -f app/pom.xml -Dmaven.test.failure.ignore=true  test'
                
            }
            post{
                success{
                    echo "========Maven Test stage executed successfully========"
                     junit 'app/target/surefire-reports/*.xml'

                }
                failure{
                    echo "========Maven Test stage execution failed========"
                     junit 'app/target/surefire-reports/*.xml'
                }
            }
        }
       
       stage('sonar analysis'){
            agent any
            steps{
                withSonarQubeEnv('sonar-server'){
                    echo 'Performing SonarQube Analysis'
                    bat 'mvn -f app/pom.xml package sonar:sonar'
                }
            }
            post{
                success{
                    echo "========Code Analysis stage executed successfully========"

                }
                failure{
                    echo "========Code Analysis stage execution failed========"
                }
            }
            
        }
        
         stage("Quality Gate") {
            steps {
              
              timeout(time: 1, unit: 'HOURS') {
                script{
                        def qg = waitForQualityGate() 
                        if (qg.status != 'OK')
                        {
                            error "Pipeline failed due to gate failure "
                            
                         }
                    }
              }
             
            }
            
            post {  
            success {
                echo ' SonarQube Analysis complete'
                }
            failure {  
             echo 'SonarQube Analysis Failed'
             
            }    
          }
        }  
        
        
    stage('deploy to artifactory'){
            steps{
                rtUpload (
            serverId: 'ARTIFACTORY_SERVER',
            spec: '''{
                 "files": [
                             {
                                "pattern": "target/*.jar",
                                "target": "art-doc-dev-loc-todo-app/"
                            }
                        ]
            }''',
            )
            }
        }
        
        stage('download artifact'){
            steps{
                 rtDownload (
                 serverId: "ARTIFACTORY_SERVER",
                spec:"""{
                     "files": [
                                {
                                    "pattern": "art-doc-dev-loc-todo-app/**",
                                    "target": "app/"      
                                }
                            ]
              }"""
            )
            
            }
        }
stage('Docker build'){
            steps{
               
                    sh 'docker image prune -a --force'
                    sh 'docker-compose build'
                
                
            }
        }
        stage('Pushing images to docker hub'){
            steps{
                

                withCredentials([string(credentialsId: 'docker-pwd', variable: 'dockerHubPWD')]) {
                            // some block
                   sh "docker login -u keerthibattula -p ${dockerHubPWD}"

                }
                sh "docker commit cisample_app_1 keerthibattula/todo-app:v${env.BUILD_ID}"
                sh "docker push keerthibattula/todo-app:v${env.BUILD_ID}"

            }
        }
        

    }
    post{
        always{
            echo "========always========"
        }
        success{
            echo "========pipeline executed successfully ========"
        }
        failure{
            echo "========pipeline execution failed========"
        }
    }
}
